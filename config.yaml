---
presubmits:
  # PR job triggering definitions.
  # Keys: Full repo name: "org/repo".
  # Values: List of jobs to run when events occur in the repo.
  #   name:          Job name.
  #   trigger:       Regexp commenters can say to trigger the job.
  #   always_run:    Whether to run for every PR. Default is false. If this is
  #                  set then your trigger needs to match "@k8s-bot test this".
  #   context:       GitHub status context.
  #   rerun_command: How should users trigger just this job, as a string, not a
  #                  regex. For example, if the trigger regex is "(e2e )?test",
  #                  then a rerun command might be "e2e test".
  #   skip_report:   If true, then do not set status or comment on GitHub.
  #   spec:          If this exists then run a kubernetes pod with this spec.
  #                  Otherwise, run a Jenkins job.
  google/cadvisor:
  - name: pull-cadvisor-e2e
    always_run: true
    context: Jenkins GCE e2e
    rerun_command: "@k8s-bot test this"
    trigger: "@k8s-bot test this"

  kubernetes/charts:
  - name: pull-charts-e2e
    always_run: true
    context: Jenkins Charts e2e
    rerun_command: "@k8s-bot e2e test this"
    trigger: "@k8s-bot (e2e )?test this"

  kubernetes/heapster:
  - name: pull-heapster-e2e
    always_run: true
    context: Jenkins GCE e2e
    rerun_command: "@k8s-bot test this"
    trigger: "@k8s-bot test this"

  kubernetes/kops:
  - name: pull-kops-e2e-kubernetes-aws
    always_run: true
    context: Jenkins Kubernetes AWS e2e
    rerun_command: "@k8s-bot aws e2e test this"
    trigger: "@k8s-bot (aws )?(e2e )?test this"

  kubernetes/kubernetes:
  - name: pull-kubernetes-bazel
    context: Jenkins Bazel Build
    always_run: true
    rerun_command: "@k8s-bot bazel test this"
    trigger: "@k8s-bot (bazel )?test this"
    branches:
    - master
    spec:
      containers:
      - image: gcr.io/k8s-testimages/bazelbuild:0.9
        args:
        - "--pull=$(PULL_REFS)"
        - "--upload=gs://kubernetes-jenkins/pr-logs"
        - "--git-cache=/root/.cache/git"
        - "--clean"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
        - name: cache-ssd
          mountPath: /root/.cache
      volumes:
      - name: service
        secret:
          name: service-account
      - name: cache-ssd
        hostPath:
          path: /mnt/disks/ssd0

  - name: pull-kubernetes-cross
    context: Jenkins Cross Build
    rerun_command: "@k8s-bot cross build this"
    trigger: "@k8s-bot (cross[ -])?build this"
    run_if_changed: '^(build/|hack/lib/)|(Makefile|_(windows|linux|osx|unsupported)(_test)?\.go)$'

  - name: pull-kubernetes-unit
    always_run: true
    context: Jenkins unit/integration
    rerun_command: "@k8s-bot unit test this"
    trigger: "@k8s-bot (unit )?test this"

  - name: pull-kubernetes-verify
    always_run: true
    context: Jenkins verification
    rerun_command: "@k8s-bot verify test this"
    trigger: "@k8s-bot (verify )?test this"

  - name: pull-kubernetes-e2e-gce
    always_run: true
    context: Jenkins GCE e2e
    rerun_command: "@k8s-bot cvm gce e2e test this"
    trigger: "@k8s-bot (cvm )?(gce )?(e2e )?test this"

  - name: pull-kubernetes-e2e-gce-canary
    context: pull-kubernetes-e2e-gce-canary
    rerun_command: "@k8s-bot pull-kubernetes-e2e-gce-canary test this"
    trigger: "@k8s-bot pull-kubernetes-e2e-gce-canary test this"

  - name: pull-kubernetes-e2e-gce-etcd3
    always_run: true
    context: Jenkins GCE etcd3 e2e
    rerun_command: "@k8s-bot gce etcd3 e2e test this"
    trigger: "@k8s-bot (gce )?(etcd3 )?(e2e )?test this"

  - name: pull-kubernetes-e2e-gke
    context: Jenkins GKE smoke e2e
    rerun_command: "@k8s-bot cvm gke e2e test this"
    trigger: "@k8s-bot (cvm )?(gke )?e2e test this"

  - name: pull-kubernetes-e2e-gke-gci
    context: Jenkins GCI GKE smoke e2e
    rerun_command: "@k8s-bot gci gke e2e test this"
    trigger: "@k8s-bot (gci )?(gke )?e2e test this"

  - name: pull-kubernetes-e2e-gce-gci
    always_run: true
    context: Jenkins GCI GCE e2e
    rerun_command: "@k8s-bot gci gce e2e test this"
    trigger: "@k8s-bot (gci )?(gce )?(e2e )?test this"

  - name: pull-kubernetes-e2e-kops-aws
    always_run: true
    context: Jenkins kops AWS e2e
    rerun_command: "@k8s-bot kops aws e2e test this"
    trigger: "@k8s-bot (kops )?(aws )?(e2e )?test this"

  - name: pull-kubernetes-federation-e2e-gce
    context: Jenkins Federation GCE e2e
    rerun_command: "@k8s-bot federation gce e2e test this"
    trigger: "@k8s-bot federation (gce )?(e2e )?test this"

  - name: pull-kubernetes-federation-e2e-gce-canary
    context: pull-kubernetes-federation-e2e-gce-canary
    rerun_command: "@k8s-bot pull-kubernetes-federation-e2e-gce-canary test this"
    trigger: "@k8s-bot pull-kubernetes-federation-e2e-gce-canary test this"

  - name: pull-kubernetes-federation-e2e-gce-gci
    context: Jenkins GCI Federation GCE e2e
    rerun_command: "@k8s-bot federation gci gce e2e test this"
    trigger: "@k8s-bot federation gci (gce )?(e2e )?test this"

  - name: pull-kubernetes-kubemark-e2e-gce
    trigger: "@k8s-bot (kubemark )?(e2e )?test this"
    always_run: true
    context: Jenkins Kubemark GCE e2e
    rerun_command: "@k8s-bot kubemark e2e test this"

  - name: pull-kubernetes-kubemark-e2e-gce-gci
    context: Jenkins GCI Kubemark GCE e2e
    rerun_command: "@k8s-bot kubemark gci e2e test this"
    trigger: "@k8s-bot kubemark gci (e2e )?test this"

  - name: pull-kubernetes-node-e2e
    always_run: true
    context: Jenkins GCE Node e2e
    rerun_command: "@k8s-bot node e2e test this"
    trigger: "@k8s-bot (node )?(e2e )?test this"

  - name: pull-kubernetes-e2e-gce-non-cri
    branches:
    - master
    always_run: true
    context: Jenkins non-CRI GCE e2e
    rerun_command: "@k8s-bot non-cri e2e test this"
    trigger: "@k8s-bot (non-cri e2e )?test this"

  - name: pull-kubernetes-node-e2e-non-cri
    skip_branches:
    - release-1.3
    - release-1.4
    always_run: true
    context: Jenkins non-CRI GCE Node e2e
    rerun_command: "@k8s-bot non-cri node e2e test this"
    trigger: "@k8s-bot (non-cri node e2e )?test this"

  kubernetes/test-infra:
  - name: pull-test-infra-bazel
    context: Bazel test
    branches:
    - master
    always_run: true
    rerun_command: "@k8s-bot bazel test this"
    trigger: "@k8s-bot (bazel )?test this"
    spec:
      containers:
      - image: gcr.io/k8s-testimages/bazelbuild:0.9
        args:
        - "--pull=$(PULL_REFS)"
        - "--upload=gs://kubernetes-jenkins/pr-logs"
        - "--git-cache=/root/.cache/git"
        - "--clean"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
        - name: cache-ssd
          mountPath: /root/.cache
      volumes:
      - name: service
        secret:
          name: service-account
      - name: cache-ssd
        hostPath:
          path: /mnt/disks/ssd0

  - name: pull-test-infra-gubernator
    context: Gubernator tests
    branches:
    - master
    rerun_command: "@k8s-bot gubernator test this"
    trigger: "@k8s-bot gubernator test this"
    run_if_changed: 'gubernator'
    spec:
      containers:
      - image: gcr.io/k8s-testimages/gubernator:0.2
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
        - name: cache-ssd
          mountPath: /root/.cache
      volumes:
      - name: service
        secret:
          name: service-account
      - name: cache-ssd
        hostPath:
          path: /mnt/disks/ssd0


postsubmits:
  kubernetes/kubernetes:
  - name: ci-kubernetes-bazel-build
    branches:
    - master
    spec:
      containers:
      - image: gcr.io/k8s-testimages/bazelbuild:0.9
        args:
        - "--branch=$(PULL_REFS)"
        - "--upload=gs://kubernetes-jenkins/logs"
        - "--git-cache=/root/.cache/git"
        - "--clean"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
        - name: cache-ssd
          mountPath: /root/.cache
      volumes:
      - name: service
        secret:
          name: service-account
      - name: cache-ssd
        hostPath:
          path: /mnt/disks/ssd0
    run_after_success:
    - name: ci-kubernetes-bazel-test
      spec:
        containers:
        - image: gcr.io/k8s-testimages/bazelbuild:0.9
          args:
          - "--branch=$(PULL_REFS)"
          - "--upload=gs://kubernetes-jenkins/logs"
          - "--git-cache=/root/.cache/git"
          - "--clean"
          securityContext:
            privileged: true
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/service-account/service-account.json
          volumeMounts:
          - name: service
            mountPath: /etc/service-account
            readOnly: true
          - name: cache-ssd
            mountPath: /root/.cache
        volumes:
        - name: service
          secret:
            name: service-account
        - name: cache-ssd
          hostPath:
            path: /mnt/disks/ssd0
      run_after_success:
      - name: ci-kubernetes-e2e-kubeadm-gce
        spec:
          containers:
          - image: gcr.io/k8s-testimages/e2e-kubeadm:0.1
            args:
            - "--branch=$(PULL_REFS)"
            - "--upload=gs://kubernetes-jenkins/logs"
            - "--git-cache=/root/.cache/git"
            - "--clean"
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/service-account/service-account.json
          - name:  JENKINS_GCE_SSH_PRIVATE_KEY_FILE
            value: /etc/ssh-key-secret/ssh-private
          - name:  JENKINS_GCE_SSH_PUBLIC_KEY_FILE
            value: /etc/ssh-key-secret/ssh-public
          volumeMounts:
          - name: service
            mountPath: /etc/service-account
            readOnly: true
          - name: ssh
            mountPath: /etc/ssh-key-secret
            readOnly: true
          - name: cache-ssd
            mountPath: /root/.cache
        volumes:
        - name: service
          secret:
            name: service-account
        - name: ssh
          secret:
            name: ssh-key-secret
            defaultMode: 0400
        - name: cache-ssd
          hostPath:
            path: /mnt/disks/ssd0

  kubernetes/test-infra:
  - name: ci-test-infra-bazel
    branches:
    - master
    spec:
      containers:
      - image: gcr.io/k8s-testimages/bazelbuild:0.9
        args:
        - "--branch=$(PULL_REFS)"
        - "--upload=gs://kubernetes-jenkins/logs"
        - "--git-cache=/root/.cache/git"
        - "--clean"
        # Bazel needs privileged mode in order to sandbox builds.
        securityContext:
          privileged: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
        - name: cache-ssd
          mountPath: /root/.cache
      volumes:
      - name: service
        secret:
          name: service-account
      - name: cache-ssd
        hostPath:
          path: /mnt/disks/ssd0

  - name: maintenance-ci-testgrid-config-upload
    branches:
    - master
    spec:
      containers:
      - image: gcr.io/k8s-testimages/gcloud-in-go:0.1
        args:
        - "--branch=$(PULL_REFS)"
        - "--upload=gs://kubernetes-jenkins/logs"
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
      volumes:
      - name: service
        secret:
          name: service-account


periodics:
- name: ci-test-infra-bazel
  interval: 1h
  spec:
    containers:
    - image: gcr.io/k8s-testimages/bazelbuild:0.9
      args:
      - "--branch=master"
      - "--upload=gs://kubernetes-jenkins/logs"
      - "--git-cache=/root/.cache/git"
      - "--clean"
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/service-account/service-account.json
        volumeMounts:
        - name: service
          mountPath: /etc/service-account
          readOnly: true
        - name: cache-ssd
          mountPath: /root/.cache
      volumes:
      - name: service
        secret:
          name: service-account
      - name: cache-ssd
        hostPath:
          path: /mnt/disks/ssd0

- name: ci-kubernetes-e2e-prow-canary
  interval: 5m
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e-prow:0.3
      args:
      - "--timeout=60"
      env:
      - name: GOOGLE_APPLICATION_CREDENTIALS
        value: /etc/service-account/service-account.json
      - name:  JENKINS_GCE_SSH_PRIVATE_KEY_FILE
        value: /etc/ssh-key-secret/ssh-private
      - name:  JENKINS_GCE_SSH_PUBLIC_KEY_FILE
        value: /etc/ssh-key-secret/ssh-public
      volumeMounts:
      - name: service
        mountPath: /etc/service-account
        readOnly: true
      - name: ssh
        mountPath: /etc/ssh-key-secret
        readOnly: true
      - name: cache-ssd
        mountPath: /root/.cache
    volumes:
    - name: service
      secret:
        name: service-account
    - name: ssh
      secret:
        name: ssh-key-secret
        defaultMode: 0400
    - name: cache-ssd
      hostPath:
        path: /mnt/disks/ssd0
