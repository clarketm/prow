# PR Jenkins job triggering definitions.
# Keys: Full repo name: "org/repo".
# Values: List of jobs to run when events occur in the repo.
#   name:          Job name.
#   trigger:       Regexp commenters can say to trigger the job.
#   always_run:    Whether to run for every PR. Default is false. If this is
#                  set then your trigger needs to match "@k8s-bot test this".
#   context:       GitHub status context.
#   rerun_command: How should users trigger just this job, as a string, not a
#                  regex. For example, if the trigger regex is "(e2e )?test",
#                  then a rerun command might be "e2e test".
#   spec:          If this exists then run a kubernetes pod with this spec.
#                  Otherwise, run a Jenkins job.
# The unit tests in cmd/hook/jobs_test.go ensure that the job definitions are
# valid.
# TODO(fejta): Ensure all jobs define an owner.
---
google/cadvisor:
- name: pull-cadvisor-e2e
  always_run: true
  context: Jenkins GCE e2e
  rerun_command: "@k8s-bot test this"
  trigger: "@k8s-bot test this"

kubernetes/charts:
- name: pull-charts-e2e
  always_run: true
  context: Jenkins Charts e2e
  rerun_command: "@k8s-bot e2e test this"
  trigger: "@k8s-bot (e2e )?test this"

kubernetes/heapster:
- name: pull-heapster-e2e
  always_run: true
  context: Jenkins GCE e2e
  rerun_command: "@k8s-bot test this"
  trigger: "@k8s-bot test this"

kubernetes/kops:
- name: pull-kops-e2e-kubernetes-aws
  context: Jenkins Kubernetes AWS e2e
  rerun_command: "@k8s-bot aws e2e test this"
  trigger: "@k8s-bot (aws )?(e2e )?test this"

kubernetes/kubernetes:
- name: pull-kubernetes-bazel
  #always_run: true
  context: Jenkins Bazel Build
  rerun_command: "@k8s-bot bazel test this"
  trigger: "@k8s-bot bazel test this"
  spec:
    nodeSelector:
      role: build
    containers:
    - name: builder
      image: gcr.io/k8s-testimages/bazelbuild:0.0
      command: ["/bin/bash", "-c"]
      args: ["git clone https://github.com/kubernetes/test-infra && ./test-infra/jenkins/bootstrap.py --repo=k8s.io/kubernetes --pull=${PULL_NUMBER} --job=pull-kubernetes-bazel"]
      volumeMounts:
      - name: cache-ssd
        mountPath: /root/.cache/bazel
      - name: service
        mountPath: /etc/service-account
        readOnly: true
      env:
      - name: GOOGLE_APPLICATION_CREDENTIALS
        value: /etc/service-account/service-account.json
      # We only want one of these to run per node. Once pod affinity is GA, use
      # that. Until then, use a hostPort.
      ports:
      - containerPort: 9999
        hostPort: 9999
      # Bazel needs privileged mode in order to sandbox builds.
      securityContext:
        privileged: true
    restartPolicy: Never
    volumes:
    - name: cache-ssd
      hostPath:
        path: /mnt/disks/ssd0
    - name: service
      secret:
        secretName: service-account

- name: pull-kubernetes-cross
  context: Jenkins Cross Build
  rerun_command: "@k8s-bot build this"
  trigger: "@k8s-bot (cross )?build this"

- name: pull-kubernetes-unit
  always_run: true
  context: Jenkins unit/integration
  rerun_command: "@k8s-bot unit test this"
  trigger: "@k8s-bot (unit )?test this"

- name: pull-kubernetes-verify
  always_run: true
  context: Jenkins verification
  rerun_command: "@k8s-bot verify test this"
  trigger: "@k8s-bot (verify )?test this"

- name: pull-kubernetes-e2e-gce
  always_run: true
  context: Jenkins GCE e2e
  rerun_command: "@k8s-bot cvm gce e2e test this"
  trigger: "@k8s-bot (cvm )?(gce )?(e2e )?test this"

- name: pull-kubernetes-e2e-gce-etcd3
  always_run: true
  context: Jenkins GCE etcd3 e2e
  rerun_command: "@k8s-bot gce etcd3 e2e test this"
  trigger: "@k8s-bot (gce )?(etcd3 )?(e2e )?test this"

- name: pull-kubernetes-e2e-gke
  always_run: true
  context: Jenkins GKE smoke e2e
  rerun_command: "@k8s-bot cvm gke e2e test this"
  trigger: "@k8s-bot (cvm )?(gke )?(e2e )?test this"

- name: pull-kubernetes-e2e-gke-gci
  always_run: true
  context: Jenkins GCI GKE smoke e2e
  rerun_command: "@k8s-bot gci gke e2e test this"
  trigger: "@k8s-bot (gci )?(gke )?(e2e )?test this"

- name: pull-kubernetes-e2e-gce-gci
  always_run: true
  context: Jenkins GCI GCE e2e
  rerun_command: "@k8s-bot gci gce e2e test this"
  trigger: "@k8s-bot (gci )?(gce )?(e2e )?test this"

- name: pull-kubernetes-e2e-kops-aws
  always_run: true
  context: Jenkins kops AWS e2e
  rerun_command: "@k8s-bot kops aws e2e test this"
  trigger: "@k8s-bot (kops )?(aws )?(e2e )?test this"

- name: pull-kubernetes-federation-e2e-gce
  context: Jenkins Federation GCE e2e
  rerun_command: "@k8s-bot federation gce e2e test this"
  trigger: "@k8s-bot federation (gce )?(e2e )?test this"

- name: pull-kubernetes-federation-e2e-gce-gci
  context: Jenkins GCI Federation GCE e2e
  rerun_command: "@k8s-bot federation gci gce e2e test this"
  trigger: "@k8s-bot federation gci (gce )?(e2e )?test this"

- name: pull-kubernetes-kubemark-e2e-gce
  trigger: "@k8s-bot (kubemark )?(e2e )?test this"
  always_run: true
  context: Jenkins Kubemark GCE e2e
  rerun_command: "@k8s-bot kubemark e2e test this"

- name: pull-kubernetes-kubemark-e2e-gce-gci
  context: Jenkins GCI Kubemark GCE e2e
  rerun_command: "@k8s-bot kubemark gci e2e test this"
  trigger: "@k8s-bot kubemark gci (e2e )?test this"

- name: pull-kubernetes-node-e2e
  always_run: true
  context: Jenkins GCE Node e2e
  rerun_command: "@k8s-bot node e2e test this"
  trigger: "@k8s-bot (node )?(e2e )?test this"

- name: pull-kubernetes-e2e-gce-cri
  trigger: "@k8s-bot cri (e2e )?test this"
  context: Jenkins CRI GCE e2e
  rerun_command: "@k8s-bot cri e2e test this"

- name: pull-kubernetes-node-e2e-cri
  always_run: true
  context: Jenkins CRI GCE Node e2e
  rerun_command: "@k8s-bot cri node e2e test this"
  trigger: "@k8s-bot (cri node e2e )?test this"

- name: pull-kubernetes-kubemark-e2e-gce
  context: Bootstrap Kubemark GCE e2e
  rerun_command: "@k8s-bot bootstrap kubemark e2e test this"
  trigger: "@k8s-bot bootstrap (kubemark )?(e2e )?test this"

kubernetes/test-infra:
- name: pull-test-infra-go-test
  always_run: true
  context: Jenkins go test
  rerun_command: "@k8s-bot go test this"
  trigger: "@k8s-bot (go )?test this"
